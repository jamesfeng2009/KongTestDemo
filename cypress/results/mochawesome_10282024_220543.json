{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-10-28T14:05:43.169Z",
    "end": "2024-10-28T14:05:43.718Z",
    "duration": 549,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1fa29581-3b51-4d7b-9d64-76a37eab559e",
      "title": "",
      "fullFile": "cypress/e2e/service-validation/validate_service.cy.js",
      "file": "cypress/e2e/service-validation/validate_service.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2770b10d-f981-4fe8-b7c3-13c48e6ac2c9",
          "title": "Service Validation API Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate service with name: test1 and tags: tag1",
              "fullTitle": "Service Validation API Tests should validate service with name: test1 and tags: tag1",
              "timedOut": null,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/default/schemas/services/validate',\n  body: {\n    name: name,\n    tags: tags,\n    read_timeout: 60000,\n    retries: 5,\n    connect_timeout: 60000,\n    ca_certificates: null,\n    client_certificate: null,\n    write_timeout: 60000,\n    port: 443,\n    url: \"https://www.baidu.com\"\n  }\n}).then(response => {\n  // Assert that the status code is 200\n  expect(response.status).to.eq(200);\n  // Assert that the response contains the specified message\n  expect(response.body).to.have.property('message', 'schema validation successful');\n});",
              "err": {},
              "uuid": "08fe67b7-fd1a-401f-b7f1-83e546ff9f5e",
              "parentUUID": "2770b10d-f981-4fe8-b7c3-13c48e6ac2c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate service with name: test2 and tags: tag2,tag3",
              "fullTitle": "Service Validation API Tests should validate service with name: test2 and tags: tag2,tag3",
              "timedOut": null,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/default/schemas/services/validate',\n  body: {\n    name: name,\n    tags: tags,\n    read_timeout: 60000,\n    retries: 5,\n    connect_timeout: 60000,\n    ca_certificates: null,\n    client_certificate: null,\n    write_timeout: 60000,\n    port: 443,\n    url: \"https://www.baidu.com\"\n  }\n}).then(response => {\n  // Assert that the status code is 200\n  expect(response.status).to.eq(200);\n  // Assert that the response contains the specified message\n  expect(response.body).to.have.property('message', 'schema validation successful');\n});",
              "err": {},
              "uuid": "c249ad7f-1d9b-4f81-b319-3f500994a6eb",
              "parentUUID": "2770b10d-f981-4fe8-b7c3-13c48e6ac2c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate service with name: test3 and tags: tag4",
              "fullTitle": "Service Validation API Tests should validate service with name: test3 and tags: tag4",
              "timedOut": null,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/default/schemas/services/validate',\n  body: {\n    name: name,\n    tags: tags,\n    read_timeout: 60000,\n    retries: 5,\n    connect_timeout: 60000,\n    ca_certificates: null,\n    client_certificate: null,\n    write_timeout: 60000,\n    port: 443,\n    url: \"https://www.baidu.com\"\n  }\n}).then(response => {\n  // Assert that the status code is 200\n  expect(response.status).to.eq(200);\n  // Assert that the response contains the specified message\n  expect(response.body).to.have.property('message', 'schema validation successful');\n});",
              "err": {},
              "uuid": "e33d2871-4772-4022-9808-1c45be9d4ca3",
              "parentUUID": "2770b10d-f981-4fe8-b7c3-13c48e6ac2c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new service with name: service1 and validate the response",
              "fullTitle": "Service Validation API Tests should create a new service with name: service1 and validate the response",
              "timedOut": null,
              "duration": 38,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Ensure that no service with the same name exists\ncy.request({\n  method: 'DELETE',\n  url: `/default/services/${name}`,\n  failOnStatusCode: false // Do not throw an error if the service does not exist\n}).then(deleteResponse => {\n  cy.log(`Attempted to delete existing service: ${name}, Response Status: ${deleteResponse.status}`);\n  // Create a new service\n  cy.request({\n    method: 'POST',\n    url: '/default/services',\n    body: {\n      name: name,\n      tags: tags,\n      read_timeout: 60000,\n      retries: 5,\n      connect_timeout: 60000,\n      ca_certificates: null,\n      client_certificate: null,\n      write_timeout: 60000,\n      port: 443,\n      url: \"https://www.baidu.com\"\n    },\n    failOnStatusCode: false\n  }).then(response => {\n    cy.log(`Service creation response for ${name}: ${JSON.stringify(response.body)}`);\n    // Assert that the status code is 201\n    expect(response.status).to.eq(201);\n    // Assert that the response contains the correct tags and name\n    expect(response.body).to.have.property('name', name);\n    expect(response.body.tags).to.deep.equal(tags);\n  });\n});",
              "err": {},
              "uuid": "04dbc286-7d87-4e68-93e8-f7de9c091348",
              "parentUUID": "2770b10d-f981-4fe8-b7c3-13c48e6ac2c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new service with name: service2 and validate the response",
              "fullTitle": "Service Validation API Tests should create a new service with name: service2 and validate the response",
              "timedOut": null,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Ensure that no service with the same name exists\ncy.request({\n  method: 'DELETE',\n  url: `/default/services/${name}`,\n  failOnStatusCode: false // Do not throw an error if the service does not exist\n}).then(deleteResponse => {\n  cy.log(`Attempted to delete existing service: ${name}, Response Status: ${deleteResponse.status}`);\n  // Create a new service\n  cy.request({\n    method: 'POST',\n    url: '/default/services',\n    body: {\n      name: name,\n      tags: tags,\n      read_timeout: 60000,\n      retries: 5,\n      connect_timeout: 60000,\n      ca_certificates: null,\n      client_certificate: null,\n      write_timeout: 60000,\n      port: 443,\n      url: \"https://www.baidu.com\"\n    },\n    failOnStatusCode: false\n  }).then(response => {\n    cy.log(`Service creation response for ${name}: ${JSON.stringify(response.body)}`);\n    // Assert that the status code is 201\n    expect(response.status).to.eq(201);\n    // Assert that the response contains the correct tags and name\n    expect(response.body).to.have.property('name', name);\n    expect(response.body.tags).to.deep.equal(tags);\n  });\n});",
              "err": {},
              "uuid": "4cd92626-48ba-4bbd-9901-c73af4946b10",
              "parentUUID": "2770b10d-f981-4fe8-b7c3-13c48e6ac2c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve the list of services and create routes for each service",
              "fullTitle": "Service Validation API Tests should retrieve the list of services and create routes for each service",
              "timedOut": null,
              "duration": 185,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/default/services',\n  qs: {\n    sort_desc: 1,\n    size: 30\n  }\n}).then(response => {\n  // Assert that the status code is 200\n  expect(response.status).to.eq(200);\n  // Assert that the response contains services\n  const services = response.body.data;\n  expect(services).to.be.an('array').that.is.not.empty;\n  // Log service objects\n  services.forEach(service => {\n    cy.log(`Service found with ID: ${service.id}, Name: ${service.name}`);\n  });\n  // Create a new route for each service\n  services.forEach(service => {\n    createRouteTestCases.forEach(({\n      name,\n      tags,\n      paths\n    }) => {\n      // First check if a route with the same name already exists\n      cy.request({\n        method: 'GET',\n        url: '/default/routes',\n        qs: {\n          name: name\n        },\n        failOnStatusCode: false // Continue if no route is found with the same name\n      }).then(getResponse => {\n        if (getResponse.status === 200 && getResponse.body.data.length > 0) {\n          // If a route with the same name already exists, delete it\n          const existingRouteId = getResponse.body.data[0].id;\n          cy.request({\n            method: 'DELETE',\n            url: `/default/routes/${existingRouteId}`,\n            failOnStatusCode: false\n          }).then(deleteResponse => {\n            cy.log(`Deleted existing route with ID: ${existingRouteId}`);\n            // Then create the new route\n            createNewRoute(service.id, name, tags, paths);\n          });\n        } else {\n          // If no route with the same name exists, create the new route\n          createNewRoute(service.id, name, tags, paths);\n        }\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "5dcb2a11-5292-45b0-9e95-ab3f13b82fa4",
              "parentUUID": "2770b10d-f981-4fe8-b7c3-13c48e6ac2c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve the list of routes and delete each one",
              "fullTitle": "Service Validation API Tests should retrieve the list of routes and delete each one",
              "timedOut": null,
              "duration": 78,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/default/routes',\n  qs: {\n    sort_desc: 1,\n    size: 30\n  }\n}).then(response => {\n  // Assert that the status code is 200\n  expect(response.status).to.eq(200);\n  // Assert that the response contains routes\n  const routes = response.body.data;\n  expect(routes).to.be.an('array').that.is.not.empty;\n  // Log route objects\n  routes.forEach(route => {\n    cy.log(`Route found with ID: ${route.id}, Name: ${route.name}`);\n  });\n  // Delete each route\n  routes.forEach(route => {\n    cy.request({\n      method: 'DELETE',\n      url: `/default/routes/${route.id}`,\n      failOnStatusCode: false // Do not fail the test if DELETE fails, for easier debugging\n    }).then(deleteResponse => {\n      // Log the DELETE response status for debugging\n      cy.log(`DELETE Response Status for route ID ${route.id}: ${deleteResponse.status}`);\n      // Assert that the DELETE request returned a 204 status code\n      expect(deleteResponse.status).to.eq(204);\n    });\n  });\n}).then(() => {\n  // Send another GET request to verify that all routes have been deleted\n  cy.request({\n    method: 'GET',\n    url: '/default/routes',\n    qs: {\n      sort_desc: 1,\n      size: 30\n    }\n  }).then(response => {\n    // Assert that the status code is 200\n    expect(response.status).to.eq(200);\n    // Assert that the response contains no routes\n    expect(response.body.data).to.be.an('array').that.is.empty;\n  });\n});",
              "err": {},
              "uuid": "5674fabb-681f-48a4-8258-beb29c9c7f03",
              "parentUUID": "2770b10d-f981-4fe8-b7c3-13c48e6ac2c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete all specified services",
              "fullTitle": "Service Validation API Tests should delete all specified services",
              "timedOut": null,
              "duration": 60,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/default/services',\n  qs: {\n    sort_desc: 1,\n    size: 30\n  }\n}).then(response => {\n  // Assert that the status code is 200\n  expect(response.status).to.eq(200);\n  // Assert that the response contains services\n  const services = response.body.data;\n  expect(services).to.be.an('array').that.is.not.empty;\n  // Iterate over services and delete each one\n  services.forEach(service => {\n    cy.log(`Deleting service with ID: ${service.id}`);\n    // Delete the service\n    cy.request({\n      method: 'DELETE',\n      url: `/default/services/${service.id}`,\n      failOnStatusCode: false // Do not fail the test if DELETE fails, for easier debugging\n    }).then(deleteResponse => {\n      // Log the DELETE response status for debugging\n      cy.log(`DELETE Response Status for service ID ${service.id}: ${deleteResponse.status}`);\n      // Assert that the DELETE request returned a 204 status code\n      expect(deleteResponse.status).to.eq(204);\n    });\n  });\n});",
              "err": {},
              "uuid": "429f0137-3241-4d16-807a-475cae3df410",
              "parentUUID": "2770b10d-f981-4fe8-b7c3-13c48e6ac2c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify that the services list is empty when sorted by path",
              "fullTitle": "Service Validation API Tests should verify that the services list is empty when sorted by path",
              "timedOut": null,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/default/services',\n  qs: {\n    sort_by: 'path',\n    size: 30\n  }\n}).then(response => {\n  // Assert that the status code is 200\n  expect(response.status).to.eq(200);\n  // Assert that the data property is an empty array\n  expect(response.body.data).to.be.an('array').that.is.empty;\n});",
              "err": {},
              "uuid": "36eafc54-51c0-4f48-bb65-cdd51f264060",
              "parentUUID": "2770b10d-f981-4fe8-b7c3-13c48e6ac2c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "08fe67b7-fd1a-401f-b7f1-83e546ff9f5e",
            "c249ad7f-1d9b-4f81-b319-3f500994a6eb",
            "e33d2871-4772-4022-9808-1c45be9d4ca3",
            "04dbc286-7d87-4e68-93e8-f7de9c091348",
            "4cd92626-48ba-4bbd-9901-c73af4946b10",
            "5dcb2a11-5292-45b0-9e95-ab3f13b82fa4",
            "5674fabb-681f-48a4-8258-beb29c9c7f03",
            "429f0137-3241-4d16-807a-475cae3df410",
            "36eafc54-51c0-4f48-bb65-cdd51f264060"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 474,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": true,
        "json": true,
        "timestamp": "mmddyyyy_HHMMss"
      },
      "version": "6.2.0"
    }
  }
}